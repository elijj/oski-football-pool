# =============================================================================
# Football Pool Domination System - Simplified Pre-commit Configuration
# =============================================================================
# This configuration focuses on essential security and code quality checks

repos:
  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================

  # Detect secrets, API keys, and sensitive data
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: |
          (?x)^(
            \.env\.example|
            \.gitignore|
            README\.md|
            docs/.*|
            examples/.*|
            \.pre-commit-config.*\.yaml
          )$

  # =============================================================================
  # CODE QUALITY & FORMATTING
  # =============================================================================

  # Python code formatting with black
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: ['--line-length=100']

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ['--profile', 'black', '--line-length=100']

  # Linting with ruff (fast Python linter)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.8
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format

  # =============================================================================
  # SECURITY & VULNERABILITY SCANNING
  # =============================================================================

  # Check for known security vulnerabilities in dependencies
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-r', '.', '-f', 'json', '-o', 'bandit-report.json']
        exclude: |
          (?x)^(
            tests/.*|
            examples/.*|
            docs/.*|
            \.venv/.*|
            venv/.*
          )$

  # Scan for dependency vulnerabilities
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: requirements.*\.txt$

  # =============================================================================
  # FILE VALIDATION & CLEANUP
  # =============================================================================

  # General pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File validation
      - id: check-yaml
        args: ['--unsafe']
      - id: check-json
      - id: check-toml

      # Security checks
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
      - id: check-case-conflict

      # File cleanup
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-docstring-first

      # Python specific
      - id: debug-statements
      - id: check-ast

      # Exclude certain files
      - id: mixed-line-ending
        exclude: |
          (?x)^(
            \.gitignore|
            \.env\.example|
            \.secrets\.baseline|
            bandit-report\.json
          )$

  # =============================================================================
  # PROJECT-SPECIFIC HOOKS
  # =============================================================================

  # Ensure no database files are committed
  - repo: local
    hooks:
      - id: check-database-files
        name: Check for database files
        entry: bash -c 'if git diff --cached --name-only | grep -E "\.(db|sqlite|sqlite3)$"; then echo "❌ Database files detected! Add to .gitignore"; exit 1; fi'
        language: system
        files: '\.(db|sqlite|sqlite3)$'

      - id: check-env-files
        name: Check for .env files
        entry: bash -c 'if git diff --cached --name-only | grep -E "^\.env$"; then echo "❌ .env file detected! Use .env.example instead"; exit 1; fi'
        language: system
        files: '^\.env$'

      - id: check-api-keys
        name: Check for hardcoded API keys
        entry: bash -c 'if git diff --cached | grep -E "(api[_-]?key|secret|password|token)\s*=\s*[\"\'][^\"\']+[\"\']"; then echo "❌ Potential hardcoded credentials detected!"; exit 1; fi'
        language: system

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================
#
# To install and use:
# 1. pip install pre-commit
# 2. pre-commit install
# 3. pre-commit run --all-files  # Test all files
#
# To update hooks:
# pre-commit autoupdate
#
# To skip hooks (not recommended):
# git commit --no-verify
#
# =============================================================================
